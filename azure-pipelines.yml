# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pr:
- master

variables:
  buildConfiguration: Release
  buildPlatform: Any CPU
  coreSolution: 'src\FreshMvvmCore.sln'
  coreCSProj: 'src\FreshMvvm\*.csproj'
  testDll: 'src\FreshMvvm.Tests\bin\Release\netcoreapp2.1\FreshMvvm.Tests.dll'

pool:
    vmImage: vs2017-win2016

steps:
- task: VSBuild@1
  displayName: Nuget Restore
  inputs:
    solution: '$(coreSolution)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/t:Restore'

- task: DotNetCoreCLI@2
  displayName: Build FreshMvvm Core Solution
  inputs:
    command: 'build'
    projects: '$(coreSolution)'
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName:  dotnet pack
  inputs:
    command: 'pack'
    arguments: '--configuration $(buildConfiguration)'
    packagesToPack: '$(coreCSProj)'
    nobuild: true
    versioningScheme: 'off'

- task: DotNetCoreCLI@2
  displayName: Run Unit Tests
  inputs:
    command: test
    projects: 'src/FreshMvvm.Tests/*.csproj'
    configuration: '$(buildConfiguration)'

- task: NuGetCommand@2
  displayName: 'nuget push'
  inputs:
    command: 'push'
    feedsToUse: 'select'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'FreshMvvmTestFeed'
    versioningScheme: 'off'
    allowPackageConflicts: true






